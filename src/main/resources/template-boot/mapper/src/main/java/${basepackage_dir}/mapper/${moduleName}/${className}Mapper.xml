<#include "/macro.include"/>
<#assign className = table.className>
<#assign classNameFirstLower = table.classNameFirstLower>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>
<mapper namespace="${basepackage}.mapper.${moduleName}.${className}Mapper">

	<resultMap id="BaseResultMap" type="${basepackage}.domain.${moduleName}.${className}">
		<#list table.columns as column>
		<#if column.sqlName == "id">
		<id column="id" jdbcType="VARCHAR" property="id" />
		<#else>
		<result column="${column.sqlName}" jdbcType="${column.jdbcType}" property="${column.columnNameFirstLower}" />
		</#if>
		</#list>
	</resultMap>

	<sql id="Base_Column_List">
		<#list table.columns as column>
		${column.sqlName}<#if column_has_next>,</#if>
		</#list>
	</sql>

	<sql id="condition_sql">
		<#list table.columns as column>
		<#if column.isStringColumn>
		<if test="${column.columnNameFirstLower} != null and ${column.columnNameFirstLower} !=''  ">
			AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower+",jdbcType=${column.jdbcType}" />
		</if>
		</#if>
		<#if !column.isStringColumn>
		<if test="${column.columnNameFirstLower} != null">
			AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower +",jdbcType=${column.jdbcType}" />
		</if>
		</#if>
		</#list>
	</sql>

	<sql id="condition_sql_like">
		<#list table.columns as column>
		<#if column.isStringColumn>
		<if test="${column.columnNameFirstLower} != null and ${column.columnNameFirstLower} !=''  ">
			AND ${column.sqlName} CONCAT('%', <@mapperEl column.columnNameFirstLower +",jdbcType=${column.jdbcType}"/> ,'%')
		</if>
		</#if>
		<#if !column.isStringColumn>
		<if test="${column.columnNameFirstLower} != null">
		AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower +",jdbcType=${column.jdbcType}" />
		</if>
		</#if>
		</#list>
	</sql>

	<select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List"/>
		from
		${table.sqlName}
		where id = <@mapperEl "id,jdbcType=VARCHAR"/>
	</select>

	<!--<select id="listPage" parameterType="${basepackage}.vo.${className}Vo" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from
		${table.sqlName}
		<where>
			<include refid="condition_sql_like" />
		</where>
		<![CDATA[ order by create_time desc]]>
		limit <@mapperEl "pageFirst"/>,<@mapperEl "pageLast"/>
	</select>

	<select id="listPageCount" parameterType="${basepackage}.vo.${className}Vo"
			resultType="long">
		select count(1) from
		${table.sqlName}
		<where>
			<include refid="condition_sql_like" />
		</where>
	</select>-->

	<select id="list" parameterType="${basepackage}.domain.${moduleName}.${className}" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from
		${table.sqlName}
		<where>
			<include refid="condition_sql_like" />
		</where>
		<![CDATA[ order by create_time desc]]>
	</select>

	<select id="getBy" parameterType="${basepackage}.domain.${moduleName}.${className}" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from
		${table.sqlName}
		<where>
			<include refid="condition_sql_like" />
		</where>
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from ${table.sqlName}
        where id = <@mapperEl "id,jdbcType=VARCHAR"/>
	</delete>

	<delete id="deleteSelective" parameterType="${basepackage}.domain.${moduleName}.${className}">
		delete from ${table.sqlName}
		<where>
			<include refid="condition_sql" />
		</where>
	</delete>

	<insert id="batchDelete" parameterType="java.util.List">
		delete from ${table.sqlName} where id in
		<foreach collection="list" item="id" open="(" separator="," close=")">
			id
		</foreach>
	</insert>

	<insert id="insertSelective" parameterType="${basepackage}.domain.${moduleName}.${className}">
		insert into ${table.sqlName}
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<#list table.columns as column>
			<#if column.isStringColumn>
			<if test="${column.columnNameFirstLower} != null and ${column.columnNameFirstLower} !=''  ">
				 ${column.sqlName},
			</if>
			</#if>
			<#if !column.isStringColumn>
			<if test="${column.columnNameFirstLower} != null">
				${column.sqlName},
			</if>
			</#if>
			</#list>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<#list table.columns as column>
			<#if column.isStringColumn>
			<if test="${column.columnNameFirstLower} != null and ${column.columnNameFirstLower} !='' ">
				<@mapperEl column.columnNameFirstLower+",jdbcType=${column.jdbcType}"/>,
			</if>
			</#if>
			<#if !column.isStringColumn>
			<if test="${column.columnNameFirstLower} != null">
				<@mapperEl column.columnNameFirstLower+",jdbcType=${column.jdbcType}"/>,
			</if>
			</#if>
			</#list>
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective" parameterType="${basepackage}.domain.${moduleName}.${className}">
		update ${table.sqlName}
		<set>
			<#list table.columns as column>
			<#if column.isStringColumn>
			<if test="${column.columnNameFirstLower} != null and ${column.columnNameFirstLower} !=''  ">
				${column.sqlName} =  <@mapperEl column.columnNameFirstLower+",jdbcType=${column.jdbcType}" />,
			</if>
			</#if>
			<#if !column.isStringColumn>
			<if test="${column.columnNameFirstLower} != null">
				${column.sqlName} =  <@mapperEl column.columnNameFirstLower+",jdbcType=${column.jdbcType}" />,
			</if>
			</#if>
			</#list>
		</set>
		where id = <@mapperEl "id,jdbcType=VARCHAR"/>
	</update>

	<update id="updateByPrimaryKey" parameterType="${basepackage}.domain.${moduleName}.${className}">
		update ${table.sqlName}
		set
		<#list table.columns as column>
			${column.sqlName} =  <@mapperEl column.columnNameFirstLower+",jdbcType=${column.jdbcType}" />,
		</#list>
		where id = <@mapperEl "id,jdbcType=VARCHAR"/>
	</update>

	<insert id="batchInsert" parameterType="java.util.List">
		insert into  ${table.sqlName}  ( <include refid="Base_Column_List" /> )
		values
		<foreach collection="list" item="item" index="index" separator=",">
			(<#list table.columns as column>
				<#if column.sqlName != "id">
					<@mapperEl "item."+column.columnNameFirstLower />
				</#if>
			</#list>)
		</foreach>
	</insert>

</mapper>

